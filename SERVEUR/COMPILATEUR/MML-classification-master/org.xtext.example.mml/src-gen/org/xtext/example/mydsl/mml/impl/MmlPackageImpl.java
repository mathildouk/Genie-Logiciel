/**
 * generated by Xtext 2.20.0
 */
package org.xtext.example.mydsl.mml.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mydsl.mml.AllVariables;
import org.xtext.example.mydsl.mml.CSVParsingConfiguration;
import org.xtext.example.mydsl.mml.CSVSeparator;
import org.xtext.example.mydsl.mml.CrossValidation;
import org.xtext.example.mydsl.mml.DataInput;
import org.xtext.example.mydsl.mml.FormulaItem;
import org.xtext.example.mydsl.mml.FrameworkLang;
import org.xtext.example.mydsl.mml.LogisticRegression;
import org.xtext.example.mydsl.mml.MLAlgorithm;
import org.xtext.example.mydsl.mml.MLChoiceAlgorithm;
import org.xtext.example.mydsl.mml.MMLModel;
import org.xtext.example.mydsl.mml.MmlFactory;
import org.xtext.example.mydsl.mml.MmlPackage;
import org.xtext.example.mydsl.mml.PredictorVariables;
import org.xtext.example.mydsl.mml.RFormula;
import org.xtext.example.mydsl.mml.RandomForest;
import org.xtext.example.mydsl.mml.SVMClassification;
import org.xtext.example.mydsl.mml.SVMKernel;
import org.xtext.example.mydsl.mml.StratificationMethod;
import org.xtext.example.mydsl.mml.TrainingTest;
import org.xtext.example.mydsl.mml.Validation;
import org.xtext.example.mydsl.mml.ValidationMetric;
import org.xtext.example.mydsl.mml.XFormula;
import org.xtext.example.mydsl.mml.XGboost;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MmlPackageImpl extends EPackageImpl implements MmlPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mmlModelEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dataInputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass csvParsingConfigurationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mlChoiceAlgorithmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mlAlgorithmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass svmEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dtEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass randomForestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass logisticRegressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xGboostEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rFormulaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xFormulaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass allVariablesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass predictorVariablesEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass formulaItemEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass validationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stratificationMethodEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass crossValidationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass trainingTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum csvSeparatorEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum frameworkLangEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum svmKernelEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum svmClassificationEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum validationMetricEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mydsl.mml.MmlPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MmlPackageImpl()
  {
    super(eNS_URI, MmlFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link MmlPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MmlPackage init()
  {
    if (isInited) return (MmlPackage)EPackage.Registry.INSTANCE.getEPackage(MmlPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredMmlPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    MmlPackageImpl theMmlPackage = registeredMmlPackage instanceof MmlPackageImpl ? (MmlPackageImpl)registeredMmlPackage : new MmlPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theMmlPackage.createPackageContents();

    // Initialize created meta-data
    theMmlPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMmlPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MmlPackage.eNS_URI, theMmlPackage);
    return theMmlPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMMLModel()
  {
    return mmlModelEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMMLModel_Input()
  {
    return (EReference)mmlModelEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMMLModel_Algorithms()
  {
    return (EReference)mmlModelEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMMLModel_Formula()
  {
    return (EReference)mmlModelEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMMLModel_Validation()
  {
    return (EReference)mmlModelEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDataInput()
  {
    return dataInputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDataInput_Filelocation()
  {
    return (EAttribute)dataInputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDataInput_ParsingInstruction()
  {
    return (EReference)dataInputEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCSVParsingConfiguration()
  {
    return csvParsingConfigurationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getCSVParsingConfiguration_Sep()
  {
    return (EAttribute)csvParsingConfigurationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMLChoiceAlgorithm()
  {
    return mlChoiceAlgorithmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMLChoiceAlgorithm_Framework()
  {
    return (EAttribute)mlChoiceAlgorithmEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMLChoiceAlgorithm_Algorithm()
  {
    return (EReference)mlChoiceAlgorithmEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMLAlgorithm()
  {
    return mlAlgorithmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSVM()
  {
    return svmEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVM_Gamma()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVM_C()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVM_KernelSpecified()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVM_Kernel()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVM_ClassificationSpecified()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSVM_Svmclassification()
  {
    return (EAttribute)svmEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDT()
  {
    return dtEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDT_Max_depth()
  {
    return (EAttribute)dtEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRandomForest()
  {
    return randomForestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLogisticRegression()
  {
    return logisticRegressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXGboost()
  {
    return xGboostEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRFormula()
  {
    return rFormulaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRFormula_Predictive()
  {
    return (EReference)rFormulaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRFormula_Predictors()
  {
    return (EReference)rFormulaEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXFormula()
  {
    return xFormulaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAllVariables()
  {
    return allVariablesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAllVariables_All()
  {
    return (EAttribute)allVariablesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPredictorVariables()
  {
    return predictorVariablesEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPredictorVariables_Vars()
  {
    return (EReference)predictorVariablesEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFormulaItem()
  {
    return formulaItemEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFormulaItem_Column()
  {
    return (EAttribute)formulaItemEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFormulaItem_ColName()
  {
    return (EAttribute)formulaItemEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValidation()
  {
    return validationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValidation_Stratification()
  {
    return (EReference)validationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getValidation_Metric()
  {
    return (EAttribute)validationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStratificationMethod()
  {
    return stratificationMethodEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStratificationMethod_Number()
  {
    return (EAttribute)stratificationMethodEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCrossValidation()
  {
    return crossValidationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTrainingTest()
  {
    return trainingTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getCSVSeparator()
  {
    return csvSeparatorEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getFrameworkLang()
  {
    return frameworkLangEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getSVMKernel()
  {
    return svmKernelEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getSVMClassification()
  {
    return svmClassificationEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getValidationMetric()
  {
    return validationMetricEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MmlFactory getMmlFactory()
  {
    return (MmlFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    mmlModelEClass = createEClass(MML_MODEL);
    createEReference(mmlModelEClass, MML_MODEL__INPUT);
    createEReference(mmlModelEClass, MML_MODEL__ALGORITHMS);
    createEReference(mmlModelEClass, MML_MODEL__FORMULA);
    createEReference(mmlModelEClass, MML_MODEL__VALIDATION);

    dataInputEClass = createEClass(DATA_INPUT);
    createEAttribute(dataInputEClass, DATA_INPUT__FILELOCATION);
    createEReference(dataInputEClass, DATA_INPUT__PARSING_INSTRUCTION);

    csvParsingConfigurationEClass = createEClass(CSV_PARSING_CONFIGURATION);
    createEAttribute(csvParsingConfigurationEClass, CSV_PARSING_CONFIGURATION__SEP);

    mlChoiceAlgorithmEClass = createEClass(ML_CHOICE_ALGORITHM);
    createEAttribute(mlChoiceAlgorithmEClass, ML_CHOICE_ALGORITHM__FRAMEWORK);
    createEReference(mlChoiceAlgorithmEClass, ML_CHOICE_ALGORITHM__ALGORITHM);

    mlAlgorithmEClass = createEClass(ML_ALGORITHM);

    svmEClass = createEClass(SVM);
    createEAttribute(svmEClass, SVM__GAMMA);
    createEAttribute(svmEClass, SVM__C);
    createEAttribute(svmEClass, SVM__KERNEL_SPECIFIED);
    createEAttribute(svmEClass, SVM__KERNEL);
    createEAttribute(svmEClass, SVM__CLASSIFICATION_SPECIFIED);
    createEAttribute(svmEClass, SVM__SVMCLASSIFICATION);

    dtEClass = createEClass(DT);
    createEAttribute(dtEClass, DT__MAX_DEPTH);

    randomForestEClass = createEClass(RANDOM_FOREST);

    logisticRegressionEClass = createEClass(LOGISTIC_REGRESSION);

    xGboostEClass = createEClass(XGBOOST);

    rFormulaEClass = createEClass(RFORMULA);
    createEReference(rFormulaEClass, RFORMULA__PREDICTIVE);
    createEReference(rFormulaEClass, RFORMULA__PREDICTORS);

    xFormulaEClass = createEClass(XFORMULA);

    allVariablesEClass = createEClass(ALL_VARIABLES);
    createEAttribute(allVariablesEClass, ALL_VARIABLES__ALL);

    predictorVariablesEClass = createEClass(PREDICTOR_VARIABLES);
    createEReference(predictorVariablesEClass, PREDICTOR_VARIABLES__VARS);

    formulaItemEClass = createEClass(FORMULA_ITEM);
    createEAttribute(formulaItemEClass, FORMULA_ITEM__COLUMN);
    createEAttribute(formulaItemEClass, FORMULA_ITEM__COL_NAME);

    validationEClass = createEClass(VALIDATION);
    createEReference(validationEClass, VALIDATION__STRATIFICATION);
    createEAttribute(validationEClass, VALIDATION__METRIC);

    stratificationMethodEClass = createEClass(STRATIFICATION_METHOD);
    createEAttribute(stratificationMethodEClass, STRATIFICATION_METHOD__NUMBER);

    crossValidationEClass = createEClass(CROSS_VALIDATION);

    trainingTestEClass = createEClass(TRAINING_TEST);

    // Create enums
    csvSeparatorEEnum = createEEnum(CSV_SEPARATOR);
    frameworkLangEEnum = createEEnum(FRAMEWORK_LANG);
    svmKernelEEnum = createEEnum(SVM_KERNEL);
    svmClassificationEEnum = createEEnum(SVM_CLASSIFICATION);
    validationMetricEEnum = createEEnum(VALIDATION_METRIC);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    svmEClass.getESuperTypes().add(this.getMLAlgorithm());
    dtEClass.getESuperTypes().add(this.getMLAlgorithm());
    randomForestEClass.getESuperTypes().add(this.getMLAlgorithm());
    logisticRegressionEClass.getESuperTypes().add(this.getMLAlgorithm());
    xGboostEClass.getESuperTypes().add(this.getMLAlgorithm());
    allVariablesEClass.getESuperTypes().add(this.getXFormula());
    predictorVariablesEClass.getESuperTypes().add(this.getXFormula());
    crossValidationEClass.getESuperTypes().add(this.getStratificationMethod());
    trainingTestEClass.getESuperTypes().add(this.getStratificationMethod());

    // Initialize classes and features; add operations and parameters
    initEClass(mmlModelEClass, MMLModel.class, "MMLModel", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMMLModel_Input(), this.getDataInput(), null, "input", null, 0, 1, MMLModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMMLModel_Algorithms(), this.getMLChoiceAlgorithm(), null, "algorithms", null, 0, -1, MMLModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMMLModel_Formula(), this.getRFormula(), null, "formula", null, 0, 1, MMLModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMMLModel_Validation(), this.getValidation(), null, "validation", null, 0, 1, MMLModel.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dataInputEClass, DataInput.class, "DataInput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDataInput_Filelocation(), ecorePackage.getEString(), "filelocation", null, 0, 1, DataInput.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getDataInput_ParsingInstruction(), this.getCSVParsingConfiguration(), null, "parsingInstruction", null, 0, 1, DataInput.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(csvParsingConfigurationEClass, CSVParsingConfiguration.class, "CSVParsingConfiguration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getCSVParsingConfiguration_Sep(), this.getCSVSeparator(), "sep", null, 0, 1, CSVParsingConfiguration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mlChoiceAlgorithmEClass, MLChoiceAlgorithm.class, "MLChoiceAlgorithm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMLChoiceAlgorithm_Framework(), this.getFrameworkLang(), "framework", null, 0, 1, MLChoiceAlgorithm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMLChoiceAlgorithm_Algorithm(), this.getMLAlgorithm(), null, "algorithm", null, 0, 1, MLChoiceAlgorithm.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mlAlgorithmEClass, MLAlgorithm.class, "MLAlgorithm", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(svmEClass, org.xtext.example.mydsl.mml.SVM.class, "SVM", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSVM_Gamma(), ecorePackage.getEString(), "gamma", null, 0, 1, org.xtext.example.mydsl.mml.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVM_C(), ecorePackage.getEString(), "C", null, 0, 1, org.xtext.example.mydsl.mml.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVM_KernelSpecified(), ecorePackage.getEBoolean(), "kernelSpecified", null, 0, 1, org.xtext.example.mydsl.mml.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVM_Kernel(), this.getSVMKernel(), "kernel", null, 0, 1, org.xtext.example.mydsl.mml.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVM_ClassificationSpecified(), ecorePackage.getEBoolean(), "classificationSpecified", null, 0, 1, org.xtext.example.mydsl.mml.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSVM_Svmclassification(), this.getSVMClassification(), "svmclassification", null, 0, 1, org.xtext.example.mydsl.mml.SVM.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dtEClass, org.xtext.example.mydsl.mml.DT.class, "DT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDT_Max_depth(), ecorePackage.getEInt(), "max_depth", null, 0, 1, org.xtext.example.mydsl.mml.DT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(randomForestEClass, RandomForest.class, "RandomForest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(logisticRegressionEClass, LogisticRegression.class, "LogisticRegression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(xGboostEClass, XGboost.class, "XGboost", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(rFormulaEClass, RFormula.class, "RFormula", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRFormula_Predictive(), this.getFormulaItem(), null, "predictive", null, 0, 1, RFormula.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRFormula_Predictors(), this.getXFormula(), null, "predictors", null, 0, 1, RFormula.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xFormulaEClass, XFormula.class, "XFormula", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(allVariablesEClass, AllVariables.class, "AllVariables", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAllVariables_All(), ecorePackage.getEString(), "all", null, 0, 1, AllVariables.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(predictorVariablesEClass, PredictorVariables.class, "PredictorVariables", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPredictorVariables_Vars(), this.getFormulaItem(), null, "vars", null, 0, -1, PredictorVariables.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(formulaItemEClass, FormulaItem.class, "FormulaItem", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFormulaItem_Column(), ecorePackage.getEInt(), "column", null, 0, 1, FormulaItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFormulaItem_ColName(), ecorePackage.getEString(), "colName", null, 0, 1, FormulaItem.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(validationEClass, Validation.class, "Validation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getValidation_Stratification(), this.getStratificationMethod(), null, "stratification", null, 0, 1, Validation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getValidation_Metric(), this.getValidationMetric(), "metric", null, 0, -1, Validation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stratificationMethodEClass, StratificationMethod.class, "StratificationMethod", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStratificationMethod_Number(), ecorePackage.getEInt(), "number", null, 0, 1, StratificationMethod.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(crossValidationEClass, CrossValidation.class, "CrossValidation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(trainingTestEClass, TrainingTest.class, "TrainingTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Initialize enums and add enum literals
    initEEnum(csvSeparatorEEnum, CSVSeparator.class, "CSVSeparator");
    addEEnumLiteral(csvSeparatorEEnum, CSVSeparator.COMMA);
    addEEnumLiteral(csvSeparatorEEnum, CSVSeparator.SEMI_COLON);

    initEEnum(frameworkLangEEnum, FrameworkLang.class, "FrameworkLang");
    addEEnumLiteral(frameworkLangEEnum, FrameworkLang.SCIKIT);
    addEEnumLiteral(frameworkLangEEnum, FrameworkLang.R);
    addEEnumLiteral(frameworkLangEEnum, FrameworkLang.JAVA_WEKA);

    initEEnum(svmKernelEEnum, SVMKernel.class, "SVMKernel");
    addEEnumLiteral(svmKernelEEnum, SVMKernel.LINEAR);
    addEEnumLiteral(svmKernelEEnum, SVMKernel.POLY);
    addEEnumLiteral(svmKernelEEnum, SVMKernel.RADIAL);

    initEEnum(svmClassificationEEnum, SVMClassification.class, "SVMClassification");
    addEEnumLiteral(svmClassificationEEnum, SVMClassification.CCLASS);
    addEEnumLiteral(svmClassificationEEnum, SVMClassification.NU_CLASS);
    addEEnumLiteral(svmClassificationEEnum, SVMClassification.ONE_CLASS);

    initEEnum(validationMetricEEnum, ValidationMetric.class, "ValidationMetric");
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.BALANCED_ACCURACY);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.RECALL);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.PRECISION);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.F1);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.ACCURACY);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.MACRO_RECALL);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.MACRO_PRECISION);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.MACRO_F1);
    addEEnumLiteral(validationMetricEEnum, ValidationMetric.MACRO_ACCURACY);

    // Create resource
    createResource(eNS_URI);
  }

} //MmlPackageImpl
