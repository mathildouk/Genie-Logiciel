/**
 * generated by Xtext 2.20.0
 */
package org.xtext.example.mydsl.mml.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.mml.FrameworkLang;
import org.xtext.example.mydsl.mml.MLAlgorithm;
import org.xtext.example.mydsl.mml.MLChoiceAlgorithm;
import org.xtext.example.mydsl.mml.MmlPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ML Choice Algorithm</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.mml.impl.MLChoiceAlgorithmImpl#getFramework <em>Framework</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mml.impl.MLChoiceAlgorithmImpl#getAlgorithm <em>Algorithm</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MLChoiceAlgorithmImpl extends MinimalEObjectImpl.Container implements MLChoiceAlgorithm
{
  /**
   * The default value of the '{@link #getFramework() <em>Framework</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFramework()
   * @generated
   * @ordered
   */
  protected static final FrameworkLang FRAMEWORK_EDEFAULT = FrameworkLang.SCIKIT;

  /**
   * The cached value of the '{@link #getFramework() <em>Framework</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFramework()
   * @generated
   * @ordered
   */
  protected FrameworkLang framework = FRAMEWORK_EDEFAULT;

  /**
   * The cached value of the '{@link #getAlgorithm() <em>Algorithm</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlgorithm()
   * @generated
   * @ordered
   */
  protected MLAlgorithm algorithm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MLChoiceAlgorithmImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MmlPackage.Literals.ML_CHOICE_ALGORITHM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FrameworkLang getFramework()
  {
    return framework;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFramework(FrameworkLang newFramework)
  {
    FrameworkLang oldFramework = framework;
    framework = newFramework == null ? FRAMEWORK_EDEFAULT : newFramework;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MmlPackage.ML_CHOICE_ALGORITHM__FRAMEWORK, oldFramework, framework));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MLAlgorithm getAlgorithm()
  {
    return algorithm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlgorithm(MLAlgorithm newAlgorithm, NotificationChain msgs)
  {
    MLAlgorithm oldAlgorithm = algorithm;
    algorithm = newAlgorithm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM, oldAlgorithm, newAlgorithm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlgorithm(MLAlgorithm newAlgorithm)
  {
    if (newAlgorithm != algorithm)
    {
      NotificationChain msgs = null;
      if (algorithm != null)
        msgs = ((InternalEObject)algorithm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM, null, msgs);
      if (newAlgorithm != null)
        msgs = ((InternalEObject)newAlgorithm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM, null, msgs);
      msgs = basicSetAlgorithm(newAlgorithm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM, newAlgorithm, newAlgorithm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM:
        return basicSetAlgorithm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MmlPackage.ML_CHOICE_ALGORITHM__FRAMEWORK:
        return getFramework();
      case MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM:
        return getAlgorithm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MmlPackage.ML_CHOICE_ALGORITHM__FRAMEWORK:
        setFramework((FrameworkLang)newValue);
        return;
      case MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM:
        setAlgorithm((MLAlgorithm)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MmlPackage.ML_CHOICE_ALGORITHM__FRAMEWORK:
        setFramework(FRAMEWORK_EDEFAULT);
        return;
      case MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM:
        setAlgorithm((MLAlgorithm)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MmlPackage.ML_CHOICE_ALGORITHM__FRAMEWORK:
        return framework != FRAMEWORK_EDEFAULT;
      case MmlPackage.ML_CHOICE_ALGORITHM__ALGORITHM:
        return algorithm != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (framework: ");
    result.append(framework);
    result.append(')');
    return result.toString();
  }

} //MLChoiceAlgorithmImpl
