/*
 * generated by Xtext 2.20.0
 */
grammar InternalMml;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MmlGrammarAccess;

}

@parser::members {

 	private MmlGrammarAccess grammarAccess;

    public InternalMmlParser(TokenStream input, MmlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MMLModel";
   	}

   	@Override
   	protected MmlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMMLModel
entryRuleMMLModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMMLModelRule()); }
	iv_ruleMMLModel=ruleMMLModel
	{ $current=$iv_ruleMMLModel.current; }
	EOF;

// Rule MMLModel
ruleMMLModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMMLModelAccess().getInputDataInputParserRuleCall_0_0());
				}
				lv_input_0_0=ruleDataInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMLModelRule());
					}
					set(
						$current,
						"input",
						lv_input_0_0,
						"org.xtext.example.mydsl.Mml.DataInput");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMMLModelAccess().getAlgorithmsMLChoiceAlgorithmParserRuleCall_1_0());
				}
				lv_algorithms_1_0=ruleMLChoiceAlgorithm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMLModelRule());
					}
					add(
						$current,
						"algorithms",
						lv_algorithms_1_0,
						"org.xtext.example.mydsl.Mml.MLChoiceAlgorithm");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getMMLModelAccess().getFormulaRFormulaParserRuleCall_2_0());
				}
				lv_formula_2_0=ruleRFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMLModelRule());
					}
					set(
						$current,
						"formula",
						lv_formula_2_0,
						"org.xtext.example.mydsl.Mml.RFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getMMLModelAccess().getValidationValidationParserRuleCall_3_0());
				}
				lv_validation_3_0=ruleValidation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMMLModelRule());
					}
					set(
						$current,
						"validation",
						lv_validation_3_0,
						"org.xtext.example.mydsl.Mml.Validation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDataInput
entryRuleDataInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataInputRule()); }
	iv_ruleDataInput=ruleDataInput
	{ $current=$iv_ruleDataInput.current; }
	EOF;

// Rule DataInput
ruleDataInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='datainput'
		{
			newLeafNode(otherlv_0, grammarAccess.getDataInputAccess().getDatainputKeyword_0());
		}
		(
			(
				lv_filelocation_1_0=RULE_STRING
				{
					newLeafNode(lv_filelocation_1_0, grammarAccess.getDataInputAccess().getFilelocationSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataInputRule());
					}
					setWithLastConsumed(
						$current,
						"filelocation",
						lv_filelocation_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDataInputAccess().getParsingInstructionCSVParsingConfigurationParserRuleCall_2_0());
				}
				lv_parsingInstruction_2_0=ruleCSVParsingConfiguration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataInputRule());
					}
					set(
						$current,
						"parsingInstruction",
						lv_parsingInstruction_2_0,
						"org.xtext.example.mydsl.Mml.CSVParsingConfiguration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleCSVParsingConfiguration
entryRuleCSVParsingConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCSVParsingConfigurationRule()); }
	iv_ruleCSVParsingConfiguration=ruleCSVParsingConfiguration
	{ $current=$iv_ruleCSVParsingConfiguration.current; }
	EOF;

// Rule CSVParsingConfiguration
ruleCSVParsingConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='separator'
		{
			newLeafNode(otherlv_0, grammarAccess.getCSVParsingConfigurationAccess().getSeparatorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCSVParsingConfigurationAccess().getSepCSVSeparatorEnumRuleCall_1_0());
				}
				lv_sep_1_0=ruleCSVSeparator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCSVParsingConfigurationRule());
					}
					set(
						$current,
						"sep",
						lv_sep_1_0,
						"org.xtext.example.mydsl.Mml.CSVSeparator");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMLChoiceAlgorithm
entryRuleMLChoiceAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMLChoiceAlgorithmRule()); }
	iv_ruleMLChoiceAlgorithm=ruleMLChoiceAlgorithm
	{ $current=$iv_ruleMLChoiceAlgorithm.current; }
	EOF;

// Rule MLChoiceAlgorithm
ruleMLChoiceAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mlframework'
		{
			newLeafNode(otherlv_0, grammarAccess.getMLChoiceAlgorithmAccess().getMlframeworkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMLChoiceAlgorithmAccess().getFrameworkFrameworkLangEnumRuleCall_1_0());
				}
				lv_framework_1_0=ruleFrameworkLang
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLChoiceAlgorithmRule());
					}
					set(
						$current,
						"framework",
						lv_framework_1_0,
						"org.xtext.example.mydsl.Mml.FrameworkLang");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='algorithm'
		{
			newLeafNode(otherlv_2, grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmMLAlgorithmParserRuleCall_3_0());
				}
				lv_algorithm_3_0=ruleMLAlgorithm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMLChoiceAlgorithmRule());
					}
					set(
						$current,
						"algorithm",
						lv_algorithm_3_0,
						"org.xtext.example.mydsl.Mml.MLAlgorithm");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMLAlgorithm
entryRuleMLAlgorithm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMLAlgorithmRule()); }
	iv_ruleMLAlgorithm=ruleMLAlgorithm
	{ $current=$iv_ruleMLAlgorithm.current; }
	EOF;

// Rule MLAlgorithm
ruleMLAlgorithm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMLAlgorithmAccess().getSVMParserRuleCall_0());
		}
		this_SVM_0=ruleSVM
		{
			$current = $this_SVM_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMLAlgorithmAccess().getDTParserRuleCall_1());
		}
		this_DT_1=ruleDT
		{
			$current = $this_DT_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMLAlgorithmAccess().getRandomForestParserRuleCall_2());
		}
		this_RandomForest_2=ruleRandomForest
		{
			$current = $this_RandomForest_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMLAlgorithmAccess().getLogisticRegressionParserRuleCall_3());
		}
		this_LogisticRegression_3=ruleLogisticRegression
		{
			$current = $this_LogisticRegression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMLAlgorithmAccess().getXGboostParserRuleCall_4());
		}
		this_XGboost_4=ruleXGboost
		{
			$current = $this_XGboost_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSVM
entryRuleSVM returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSVMRule()); }
	iv_ruleSVM=ruleSVM
	{ $current=$iv_ruleSVM.current; }
	EOF;

// Rule SVM
ruleSVM returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSVMAccess().getSVMAction_0(),
					$current);
			}
		)
		otherlv_1='SVM'
		{
			newLeafNode(otherlv_1, grammarAccess.getSVMAccess().getSVMKeyword_1());
		}
		(
			otherlv_2='gamma='
			{
				newLeafNode(otherlv_2, grammarAccess.getSVMAccess().getGammaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSVMAccess().getGammaFLOATParserRuleCall_2_1_0());
					}
					lv_gamma_3_0=ruleFLOAT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSVMRule());
						}
						set(
							$current,
							"gamma",
							lv_gamma_3_0,
							"org.xtext.example.mydsl.Mml.FLOAT");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='C='
			{
				newLeafNode(otherlv_4, grammarAccess.getSVMAccess().getCKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSVMAccess().getCFLOATParserRuleCall_3_1_0());
					}
					lv_C_5_0=ruleFLOAT
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSVMRule());
						}
						set(
							$current,
							"C",
							lv_C_5_0,
							"org.xtext.example.mydsl.Mml.FLOAT");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					lv_kernelSpecified_6_0='kernel='
					{
						newLeafNode(lv_kernelSpecified_6_0, grammarAccess.getSVMAccess().getKernelSpecifiedKernelKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSVMRule());
						}
						setWithLastConsumed($current, "kernelSpecified", true, "kernel=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSVMAccess().getKernelSVMKernelEnumRuleCall_4_1_0());
					}
					lv_kernel_7_0=ruleSVMKernel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSVMRule());
						}
						set(
							$current,
							"kernel",
							lv_kernel_7_0,
							"org.xtext.example.mydsl.Mml.SVMKernel");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					lv_classificationSpecified_8_0='classification'
					{
						newLeafNode(lv_classificationSpecified_8_0, grammarAccess.getSVMAccess().getClassificationSpecifiedClassificationKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSVMRule());
						}
						setWithLastConsumed($current, "classificationSpecified", true, "classification");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSVMAccess().getSvmclassificationSVMClassificationEnumRuleCall_5_1_0());
					}
					lv_svmclassification_9_0=ruleSVMClassification
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSVMRule());
						}
						set(
							$current,
							"svmclassification",
							lv_svmclassification_9_0,
							"org.xtext.example.mydsl.Mml.SVMClassification");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDT
entryRuleDT returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDTRule()); }
	iv_ruleDT=ruleDT
	{ $current=$iv_ruleDT.current; }
	EOF;

// Rule DT
ruleDT returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDTAccess().getDTAction_0(),
					$current);
			}
		)
		(
			otherlv_1='DT'
			{
				newLeafNode(otherlv_1, grammarAccess.getDTAccess().getDTKeyword_1_0());
			}
			    |
			otherlv_2='DecisionTree'
			{
				newLeafNode(otherlv_2, grammarAccess.getDTAccess().getDecisionTreeKeyword_1_1());
			}
		)
		(
			(
				lv_max_depth_3_0=RULE_INT
				{
					newLeafNode(lv_max_depth_3_0, grammarAccess.getDTAccess().getMax_depthINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDTRule());
					}
					setWithLastConsumed(
						$current,
						"max_depth",
						lv_max_depth_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)?
	)
;

// Entry rule entryRuleRandomForest
entryRuleRandomForest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRandomForestRule()); }
	iv_ruleRandomForest=ruleRandomForest
	{ $current=$iv_ruleRandomForest.current; }
	EOF;

// Rule RandomForest
ruleRandomForest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRandomForestAccess().getRandomForestAction_0(),
					$current);
			}
		)
		(
			otherlv_1='RandomForest'
			{
				newLeafNode(otherlv_1, grammarAccess.getRandomForestAccess().getRandomForestKeyword_1_0());
			}
			    |
			otherlv_2='RF'
			{
				newLeafNode(otherlv_2, grammarAccess.getRandomForestAccess().getRFKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleLogisticRegression
entryRuleLogisticRegression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogisticRegressionRule()); }
	iv_ruleLogisticRegression=ruleLogisticRegression
	{ $current=$iv_ruleLogisticRegression.current; }
	EOF;

// Rule LogisticRegression
ruleLogisticRegression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLogisticRegressionAccess().getLogisticRegressionAction_0(),
					$current);
			}
		)
		otherlv_1='LogisticRegression'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogisticRegressionAccess().getLogisticRegressionKeyword_1());
		}
	)
;

// Entry rule entryRuleXGboost
entryRuleXGboost returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXGboostRule()); }
	iv_ruleXGboost=ruleXGboost
	{ $current=$iv_ruleXGboost.current; }
	EOF;

// Rule XGboost
ruleXGboost returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXGboostAccess().getXGboostAction_0(),
					$current);
			}
		)
		otherlv_1='XGboost'
		{
			newLeafNode(otherlv_1, grammarAccess.getXGboostAccess().getXGboostKeyword_1());
		}
	)
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleRFormula
entryRuleRFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRFormulaRule()); }
	iv_ruleRFormula=ruleRFormula
	{ $current=$iv_ruleRFormula.current; }
	EOF;

// Rule RFormula
ruleRFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='formula'
		{
			newLeafNode(otherlv_0, grammarAccess.getRFormulaAccess().getFormulaKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRFormulaAccess().getPredictiveFormulaItemParserRuleCall_1_0_0());
					}
					lv_predictive_1_0=ruleFormulaItem
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRFormulaRule());
						}
						set(
							$current,
							"predictive",
							lv_predictive_1_0,
							"org.xtext.example.mydsl.Mml.FormulaItem");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='~'
			{
				newLeafNode(otherlv_2, grammarAccess.getRFormulaAccess().getTildeKeyword_1_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRFormulaAccess().getPredictorsXFormulaParserRuleCall_2_0());
				}
				lv_predictors_3_0=ruleXFormula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRFormulaRule());
					}
					set(
						$current,
						"predictors",
						lv_predictors_3_0,
						"org.xtext.example.mydsl.Mml.XFormula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleXFormula
entryRuleXFormula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFormulaRule()); }
	iv_ruleXFormula=ruleXFormula
	{ $current=$iv_ruleXFormula.current; }
	EOF;

// Rule XFormula
ruleXFormula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXFormulaAccess().getAllVariablesParserRuleCall_0());
		}
		this_AllVariables_0=ruleAllVariables
		{
			$current = $this_AllVariables_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFormulaAccess().getPredictorVariablesParserRuleCall_1());
		}
		this_PredictorVariables_1=rulePredictorVariables
		{
			$current = $this_PredictorVariables_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAllVariables
entryRuleAllVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAllVariablesRule()); }
	iv_ruleAllVariables=ruleAllVariables
	{ $current=$iv_ruleAllVariables.current; }
	EOF;

// Rule AllVariables
ruleAllVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_all_0_0='.'
			{
				newLeafNode(lv_all_0_0, grammarAccess.getAllVariablesAccess().getAllFullStopKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAllVariablesRule());
				}
				setWithLastConsumed($current, "all", lv_all_0_0, ".");
			}
		)
	)
;

// Entry rule entryRulePredictorVariables
entryRulePredictorVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredictorVariablesRule()); }
	iv_rulePredictorVariables=rulePredictorVariables
	{ $current=$iv_rulePredictorVariables.current; }
	EOF;

// Rule PredictorVariables
rulePredictorVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPredictorVariablesAccess().getVarsFormulaItemParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleFormulaItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredictorVariablesRule());
					}
					add(
						$current,
						"vars",
						lv_vars_0_0,
						"org.xtext.example.mydsl.Mml.FormulaItem");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='+'
			{
				newLeafNode(otherlv_1, grammarAccess.getPredictorVariablesAccess().getPlusSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPredictorVariablesAccess().getVarsFormulaItemParserRuleCall_1_1_0());
					}
					lv_vars_2_0=ruleFormulaItem
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPredictorVariablesRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"org.xtext.example.mydsl.Mml.FormulaItem");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFormulaItem
entryRuleFormulaItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaItemRule()); }
	iv_ruleFormulaItem=ruleFormulaItem
	{ $current=$iv_ruleFormulaItem.current; }
	EOF;

// Rule FormulaItem
ruleFormulaItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_column_0_0=RULE_INT
				{
					newLeafNode(lv_column_0_0, grammarAccess.getFormulaItemAccess().getColumnINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFormulaItemRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_colName_1_0=RULE_STRING
				{
					newLeafNode(lv_colName_1_0, grammarAccess.getFormulaItemAccess().getColNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFormulaItemRule());
					}
					setWithLastConsumed(
						$current,
						"colName",
						lv_colName_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleValidation
entryRuleValidation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValidationRule()); }
	iv_ruleValidation=ruleValidation
	{ $current=$iv_ruleValidation.current; }
	EOF;

// Rule Validation
ruleValidation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValidationAccess().getStratificationStratificationMethodParserRuleCall_0_0());
				}
				lv_stratification_0_0=ruleStratificationMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValidationRule());
					}
					set(
						$current,
						"stratification",
						lv_stratification_0_0,
						"org.xtext.example.mydsl.Mml.StratificationMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getValidationAccess().getMetricValidationMetricEnumRuleCall_1_0());
				}
				lv_metric_1_0=ruleValidationMetric
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValidationRule());
					}
					add(
						$current,
						"metric",
						lv_metric_1_0,
						"org.xtext.example.mydsl.Mml.ValidationMetric");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleStratificationMethod
entryRuleStratificationMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStratificationMethodRule()); }
	iv_ruleStratificationMethod=ruleStratificationMethod
	{ $current=$iv_ruleStratificationMethod.current; }
	EOF;

// Rule StratificationMethod
ruleStratificationMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStratificationMethodAccess().getCrossValidationParserRuleCall_0());
		}
		this_CrossValidation_0=ruleCrossValidation
		{
			$current = $this_CrossValidation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStratificationMethodAccess().getTrainingTestParserRuleCall_1());
		}
		this_TrainingTest_1=ruleTrainingTest
		{
			$current = $this_TrainingTest_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCrossValidationRule()); }
	iv_ruleCrossValidation=ruleCrossValidation
	{ $current=$iv_ruleCrossValidation.current; }
	EOF;

// Rule CrossValidation
ruleCrossValidation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CrossValidation'
		{
			newLeafNode(otherlv_0, grammarAccess.getCrossValidationAccess().getCrossValidationKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCrossValidationAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='numRepetitionCross'
		{
			newLeafNode(otherlv_2, grammarAccess.getCrossValidationAccess().getNumRepetitionCrossKeyword_2());
		}
		(
			(
				lv_number_3_0=RULE_INT
				{
					newLeafNode(lv_number_3_0, grammarAccess.getCrossValidationAccess().getNumberINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCrossValidationRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getCrossValidationAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTrainingTest
entryRuleTrainingTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrainingTestRule()); }
	iv_ruleTrainingTest=ruleTrainingTest
	{ $current=$iv_ruleTrainingTest.current; }
	EOF;

// Rule TrainingTest
ruleTrainingTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TrainingTest'
		{
			newLeafNode(otherlv_0, grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getTrainingTestAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='percentageTraining'
		{
			newLeafNode(otherlv_2, grammarAccess.getTrainingTestAccess().getPercentageTrainingKeyword_2());
		}
		(
			(
				lv_number_3_0=RULE_INT
				{
					newLeafNode(lv_number_3_0, grammarAccess.getTrainingTestAccess().getNumberINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainingTestRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getTrainingTestAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Rule CSVSeparator
ruleCSVSeparator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=','
			{
				$current = grammarAccess.getCSVSeparatorAccess().getCOMMAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCSVSeparatorAccess().getCOMMAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=';'
			{
				$current = grammarAccess.getCSVSeparatorAccess().getSEMI_COLONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCSVSeparatorAccess().getSEMI_COLONEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule FrameworkLang
ruleFrameworkLang returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='scikit-learn'
			{
				$current = grammarAccess.getFrameworkLangAccess().getSCIKITEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFrameworkLangAccess().getSCIKITEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='R'
			{
				$current = grammarAccess.getFrameworkLangAccess().getREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFrameworkLangAccess().getREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Weka'
			{
				$current = grammarAccess.getFrameworkLangAccess().getJavaWekaEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFrameworkLangAccess().getJavaWekaEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule SVMKernel
ruleSVMKernel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='linear'
			{
				$current = grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='polynomial'
			{
				$current = grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='radial'
			{
				$current = grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule SVMClassification
ruleSVMClassification returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='C-classification'
			{
				$current = grammarAccess.getSVMClassificationAccess().getCClassEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSVMClassificationAccess().getCClassEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='nu-classification'
			{
				$current = grammarAccess.getSVMClassificationAccess().getNuClassEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSVMClassificationAccess().getNuClassEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='one-classification'
			{
				$current = grammarAccess.getSVMClassificationAccess().getOneClassEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSVMClassificationAccess().getOneClassEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule ValidationMetric
ruleValidationMetric returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='balanced_accuracy'
			{
				$current = grammarAccess.getValidationMetricAccess().getBALANCED_ACCURACYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getValidationMetricAccess().getBALANCED_ACCURACYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='recall'
			{
				$current = grammarAccess.getValidationMetricAccess().getRECALLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getValidationMetricAccess().getRECALLEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='precision'
			{
				$current = grammarAccess.getValidationMetricAccess().getPRECISIONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getValidationMetricAccess().getPRECISIONEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='F1'
			{
				$current = grammarAccess.getValidationMetricAccess().getF1EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getValidationMetricAccess().getF1EnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='accuracy'
			{
				$current = grammarAccess.getValidationMetricAccess().getACCURACYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getValidationMetricAccess().getACCURACYEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='macro_recall'
			{
				$current = grammarAccess.getValidationMetricAccess().getMACRO_RECALLEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getValidationMetricAccess().getMACRO_RECALLEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='macro_precision'
			{
				$current = grammarAccess.getValidationMetricAccess().getMACRO_PRECISIONEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getValidationMetricAccess().getMACRO_PRECISIONEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='macro_F1'
			{
				$current = grammarAccess.getValidationMetricAccess().getMACRO_F1EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getValidationMetricAccess().getMACRO_F1EnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='macro_accuracy'
			{
				$current = grammarAccess.getValidationMetricAccess().getMACRO_ACCURACYEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getValidationMetricAccess().getMACRO_ACCURACYEnumLiteralDeclaration_8());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
