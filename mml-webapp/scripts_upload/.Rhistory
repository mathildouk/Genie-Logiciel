packages<- function(name){
if(eval(parse(text=paste("!require(",name,")")))){
install.packages(name)
eval(parse(text=paste("library(",name,")")))
}
}
packages("yardstick")
packages("rminer")
packages('rpart')
packages('rpart')
#Import the dataset
data = read.csv('iris.csv', sep=',')
columns_names = colnames(data)
packages<- function(name){
if(eval(parse(text=paste("!require(",name,")")))){
install.packages(name)
eval(parse(text=paste("library(",name,")")))
}
}
packages("yardstick")
packages("rminer")
packages('rpart')
packages('rpart')
#Import the dataset
data = read.csv('/home/id1019/Documents/iris.csv', sep=',')
columns_names = colnames(data)
#Spliting dataset between features (X) and label (y)
#y-> the last column
Y_name = rev(columns_names)[1]
X_names = rev(columns_names)[-1]
formula <- as.formula(paste(Y_name, "~", paste(X_names, collapse= "+")))
# Spliting dataset into training set and test set
train_size = 0.7
indice_train= sample(c(1:nrow(data)), train_size*nrow(data))
train=data[indice_train, ]
test=data[-indice_train, ]
Y_test = test[Y_name]
X_test = test[X_names]
Y_train = train[Y_name]
X_train = train[X_names]
results_colnames = c('Algorithm', 'Parameters', 'FrameWork', 'balanced_accuracy', 'f1')
results = matrix(ncol=length(results_colnames),nrow=1)
try({
algo = rpart(formula, data=train ,method="class", maxdepth = )
Y_pred = predict(algo, X_test,  type="class")
results = rbind(results, c('DecisionTree', 'max_depth = ', 'R', bal_accuracy_vec(Y_test[,1], Y_pred)
, mmetric(y=Y_test[,1], x =Y_pred, metric='ACC') /100 #ACC= equal to micro averaged F1 score (help)
))
})
algo = rpart(formula, data=train ,method="class", maxdepth = 30)
try({
algo = rpart(formula, data=train ,method="class", maxdepth = 30)
Y_pred = predict(algo, X_test,  type="class")
results = rbind(results, c('DecisionTree', 'max_depth = ', 'R', bal_accuracy_vec(Y_test[,1], Y_pred)
, mmetric(y=Y_test[,1], x =Y_pred, metric='ACC') /100 #ACC= equal to micro averaged F1 score (help)
))
})
packages('caret')
packages<- function(name){
if(eval(parse(text=paste("!require(",name,")")))){
install.packages(name)
eval(parse(text=paste("library(",name,")")))
}
}
packages("yardstick")
packages("rminer")
packages("randomForest")
packages('rpart')
packages('rpart')
packages('xgboost')
#Import the dataset
data = read.csv('scripts_upload/upload/iris.csv', sep=',')
columns_names = colnames(data)
packages('caret')
numRepetitionCross = 10
train.control <- trainControl(method = "repeatedcv", repeats = numRepetitionCross)
algo = train(formula, trControl=train.control)
algo = train(data[,X_names], data[,Y_name], trControl=train.control)
packages<- function(name){
if(eval(parse(text=paste("!require(",name,")")))){
install.packages(name)
eval(parse(text=paste("library(",name,")")))
}
}
packages("yardstick")
packages("rminer")
packages("randomForest")
packages('rpart')
packages('rpart')
packages('xgboost')
#Import the dataset
data = read.csv('scripts_upload/upload/iris.csv', sep=',')
columns_names = colnames(data)
#Spliting dataset between features (X) and label (y)
#y-> the last column
Y_name = rev(columns_names)[1]
X_names = rev(columns_names)[-1]
formula <- as.formula(paste(Y_name, "~", paste(X_names, collapse= "+")))
packages('caret')
numRepetitionCross = 10
train.control <- trainControl(method = "repeatedcv", repeats = numRepetitionCross)
algo = train(data[,X_names], data[,Y_name], trControl=train.control)
algo = train(data[X_names], data[Y_name], trControl=train.control)
data[X_names]
#Import the dataset
data = read.csv('home/documents/iris.csv', sep=',')
#Import the dataset
data = read.csv('home/Documents/iris.csv', sep=',')
getwd()
#Import the dataset
data = read.csv('/upload/iris.csv', sep=',')
#Import the dataset
data = read.csv('upload/iris.csv', sep=',')
columns_names = colnames(data)
#Spliting dataset between features (X) and label (y)
#y-> the last column
Y_name = rev(columns_names)[1]
X_names = rev(columns_names)[-1]
formula <- as.formula(paste(Y_name, "~", paste(X_names, collapse= "+")))
packages('caret')
numRepetitionCross = 10
train.control <- trainControl(method = "repeatedcv", repeats = numRepetitionCross)
algo = train(data, trControl=train.control)
algo = train(data[X_names], data[Y_name], trControl=train.control)
data[X_names]
data[Y_name]
a= data[Y_name]
a= data[,Y_name]
algo = train(data[,X_names], data[,Y_name], trControl=train.control)
packages<- function(name){
if(eval(parse(text=paste("!require(",name,")")))){
install.packages(name)
eval(parse(text=paste("library(",name,")")))
}
}
packages("yardstick")
packages("rminer")
packages("randomForest")
packages('rpart')
packages('rpart')
packages('xgboost')
#Import the dataset
data = read.csv('upload/iris.csv', sep=',')
columns_names = colnames(data)
#Spliting dataset between features (X) and label (y)
#y-> the last column
Y_name = rev(columns_names)[1]
X_names = rev(columns_names)[-1]
formula <- as.formula(paste(Y_name, "~", paste(X_names, collapse= "+")))
packages('caret')
numRepetitionCross = 10
train.control <- trainControl(method = "repeatedcv", repeats = numRepetitionCross)
algo = crossvaldata(formula,data,model="rpart", control = train.control )
algo = crossvaldata(formula,data,fit,predict,model="rpart", control = train.control )
algo = crossvaldata(formula,data,fit,predict,model="rpart", control = train.control, task = "class" )
algo = crossvaldata(formula,data,fit,model="rpart", control = train.control, task = "class" )
algo = crossvaldata(formula,data,fit,predict,model="rpart", control = train.control, task = "class" )
algo = crossvaldata(formula,data,fit,predict,model="rpart", control = train.control, task = "prob" )
