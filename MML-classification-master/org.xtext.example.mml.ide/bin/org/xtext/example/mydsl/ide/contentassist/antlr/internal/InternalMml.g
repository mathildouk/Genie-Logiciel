/*
 * generated by Xtext 2.20.0
 */
grammar InternalMml;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MmlGrammarAccess;

}
@parser::members {
	private MmlGrammarAccess grammarAccess;

	public void setGrammarAccess(MmlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMMLModel
entryRuleMMLModel
:
{ before(grammarAccess.getMMLModelRule()); }
	 ruleMMLModel
{ after(grammarAccess.getMMLModelRule()); } 
	 EOF 
;

// Rule MMLModel
ruleMMLModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMMLModelAccess().getGroup()); }
		(rule__MMLModel__Group__0)
		{ after(grammarAccess.getMMLModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataInput
entryRuleDataInput
:
{ before(grammarAccess.getDataInputRule()); }
	 ruleDataInput
{ after(grammarAccess.getDataInputRule()); } 
	 EOF 
;

// Rule DataInput
ruleDataInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataInputAccess().getGroup()); }
		(rule__DataInput__Group__0)
		{ after(grammarAccess.getDataInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCSVParsingConfiguration
entryRuleCSVParsingConfiguration
:
{ before(grammarAccess.getCSVParsingConfigurationRule()); }
	 ruleCSVParsingConfiguration
{ after(grammarAccess.getCSVParsingConfigurationRule()); } 
	 EOF 
;

// Rule CSVParsingConfiguration
ruleCSVParsingConfiguration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCSVParsingConfigurationAccess().getGroup()); }
		(rule__CSVParsingConfiguration__Group__0)
		{ after(grammarAccess.getCSVParsingConfigurationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMLChoiceAlgorithm
entryRuleMLChoiceAlgorithm
:
{ before(grammarAccess.getMLChoiceAlgorithmRule()); }
	 ruleMLChoiceAlgorithm
{ after(grammarAccess.getMLChoiceAlgorithmRule()); } 
	 EOF 
;

// Rule MLChoiceAlgorithm
ruleMLChoiceAlgorithm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMLChoiceAlgorithmAccess().getGroup()); }
		(rule__MLChoiceAlgorithm__Group__0)
		{ after(grammarAccess.getMLChoiceAlgorithmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMLAlgorithm
entryRuleMLAlgorithm
:
{ before(grammarAccess.getMLAlgorithmRule()); }
	 ruleMLAlgorithm
{ after(grammarAccess.getMLAlgorithmRule()); } 
	 EOF 
;

// Rule MLAlgorithm
ruleMLAlgorithm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMLAlgorithmAccess().getAlternatives()); }
		(rule__MLAlgorithm__Alternatives)
		{ after(grammarAccess.getMLAlgorithmAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSVM
entryRuleSVM
:
{ before(grammarAccess.getSVMRule()); }
	 ruleSVM
{ after(grammarAccess.getSVMRule()); } 
	 EOF 
;

// Rule SVM
ruleSVM 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSVMAccess().getGroup()); }
		(rule__SVM__Group__0)
		{ after(grammarAccess.getSVMAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDT
entryRuleDT
:
{ before(grammarAccess.getDTRule()); }
	 ruleDT
{ after(grammarAccess.getDTRule()); } 
	 EOF 
;

// Rule DT
ruleDT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDTAccess().getGroup()); }
		(rule__DT__Group__0)
		{ after(grammarAccess.getDTAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRandomForest
entryRuleRandomForest
:
{ before(grammarAccess.getRandomForestRule()); }
	 ruleRandomForest
{ after(grammarAccess.getRandomForestRule()); } 
	 EOF 
;

// Rule RandomForest
ruleRandomForest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRandomForestAccess().getGroup()); }
		(rule__RandomForest__Group__0)
		{ after(grammarAccess.getRandomForestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogisticRegression
entryRuleLogisticRegression
:
{ before(grammarAccess.getLogisticRegressionRule()); }
	 ruleLogisticRegression
{ after(grammarAccess.getLogisticRegressionRule()); } 
	 EOF 
;

// Rule LogisticRegression
ruleLogisticRegression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogisticRegressionAccess().getGroup()); }
		(rule__LogisticRegression__Group__0)
		{ after(grammarAccess.getLogisticRegressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXGboost
entryRuleXGboost
:
{ before(grammarAccess.getXGboostRule()); }
	 ruleXGboost
{ after(grammarAccess.getXGboostRule()); } 
	 EOF 
;

// Rule XGboost
ruleXGboost 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXGboostAccess().getGroup()); }
		(rule__XGboost__Group__0)
		{ after(grammarAccess.getXGboostAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFLOAT
entryRuleFLOAT
:
{ before(grammarAccess.getFLOATRule()); }
	 ruleFLOAT
{ after(grammarAccess.getFLOATRule()); } 
	 EOF 
;

// Rule FLOAT
ruleFLOAT 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFLOATAccess().getGroup()); }
		(rule__FLOAT__Group__0)
		{ after(grammarAccess.getFLOATAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRFormula
entryRuleRFormula
:
{ before(grammarAccess.getRFormulaRule()); }
	 ruleRFormula
{ after(grammarAccess.getRFormulaRule()); } 
	 EOF 
;

// Rule RFormula
ruleRFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRFormulaAccess().getGroup()); }
		(rule__RFormula__Group__0)
		{ after(grammarAccess.getRFormulaAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXFormula
entryRuleXFormula
:
{ before(grammarAccess.getXFormulaRule()); }
	 ruleXFormula
{ after(grammarAccess.getXFormulaRule()); } 
	 EOF 
;

// Rule XFormula
ruleXFormula 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXFormulaAccess().getAlternatives()); }
		(rule__XFormula__Alternatives)
		{ after(grammarAccess.getXFormulaAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAllVariables
entryRuleAllVariables
:
{ before(grammarAccess.getAllVariablesRule()); }
	 ruleAllVariables
{ after(grammarAccess.getAllVariablesRule()); } 
	 EOF 
;

// Rule AllVariables
ruleAllVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAllVariablesAccess().getAllAssignment()); }
		(rule__AllVariables__AllAssignment)
		{ after(grammarAccess.getAllVariablesAccess().getAllAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredictorVariables
entryRulePredictorVariables
:
{ before(grammarAccess.getPredictorVariablesRule()); }
	 rulePredictorVariables
{ after(grammarAccess.getPredictorVariablesRule()); } 
	 EOF 
;

// Rule PredictorVariables
rulePredictorVariables 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredictorVariablesAccess().getGroup()); }
		(rule__PredictorVariables__Group__0)
		{ after(grammarAccess.getPredictorVariablesAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFormulaItem
entryRuleFormulaItem
:
{ before(grammarAccess.getFormulaItemRule()); }
	 ruleFormulaItem
{ after(grammarAccess.getFormulaItemRule()); } 
	 EOF 
;

// Rule FormulaItem
ruleFormulaItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFormulaItemAccess().getAlternatives()); }
		(rule__FormulaItem__Alternatives)
		{ after(grammarAccess.getFormulaItemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValidation
entryRuleValidation
:
{ before(grammarAccess.getValidationRule()); }
	 ruleValidation
{ after(grammarAccess.getValidationRule()); } 
	 EOF 
;

// Rule Validation
ruleValidation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValidationAccess().getGroup()); }
		(rule__Validation__Group__0)
		{ after(grammarAccess.getValidationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStratificationMethod
entryRuleStratificationMethod
:
{ before(grammarAccess.getStratificationMethodRule()); }
	 ruleStratificationMethod
{ after(grammarAccess.getStratificationMethodRule()); } 
	 EOF 
;

// Rule StratificationMethod
ruleStratificationMethod 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStratificationMethodAccess().getAlternatives()); }
		(rule__StratificationMethod__Alternatives)
		{ after(grammarAccess.getStratificationMethodAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCrossValidation
entryRuleCrossValidation
:
{ before(grammarAccess.getCrossValidationRule()); }
	 ruleCrossValidation
{ after(grammarAccess.getCrossValidationRule()); } 
	 EOF 
;

// Rule CrossValidation
ruleCrossValidation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCrossValidationAccess().getGroup()); }
		(rule__CrossValidation__Group__0)
		{ after(grammarAccess.getCrossValidationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrainingTest
entryRuleTrainingTest
:
{ before(grammarAccess.getTrainingTestRule()); }
	 ruleTrainingTest
{ after(grammarAccess.getTrainingTestRule()); } 
	 EOF 
;

// Rule TrainingTest
ruleTrainingTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrainingTestAccess().getGroup()); }
		(rule__TrainingTest__Group__0)
		{ after(grammarAccess.getTrainingTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule CSVSeparator
ruleCSVSeparator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSVSeparatorAccess().getAlternatives()); }
		(rule__CSVSeparator__Alternatives)
		{ after(grammarAccess.getCSVSeparatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule FrameworkLang
ruleFrameworkLang
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrameworkLangAccess().getAlternatives()); }
		(rule__FrameworkLang__Alternatives)
		{ after(grammarAccess.getFrameworkLangAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SVMKernel
ruleSVMKernel
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMKernelAccess().getAlternatives()); }
		(rule__SVMKernel__Alternatives)
		{ after(grammarAccess.getSVMKernelAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SVMClassification
ruleSVMClassification
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMClassificationAccess().getAlternatives()); }
		(rule__SVMClassification__Alternatives)
		{ after(grammarAccess.getSVMClassificationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ValidationMetric
ruleValidationMetric
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValidationMetricAccess().getAlternatives()); }
		(rule__ValidationMetric__Alternatives)
		{ after(grammarAccess.getValidationMetricAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLAlgorithm__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLAlgorithmAccess().getSVMParserRuleCall_0()); }
		ruleSVM
		{ after(grammarAccess.getMLAlgorithmAccess().getSVMParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMLAlgorithmAccess().getDTParserRuleCall_1()); }
		ruleDT
		{ after(grammarAccess.getMLAlgorithmAccess().getDTParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMLAlgorithmAccess().getRandomForestParserRuleCall_2()); }
		ruleRandomForest
		{ after(grammarAccess.getMLAlgorithmAccess().getRandomForestParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMLAlgorithmAccess().getLogisticRegressionParserRuleCall_3()); }
		ruleLogisticRegression
		{ after(grammarAccess.getMLAlgorithmAccess().getLogisticRegressionParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getMLAlgorithmAccess().getXGboostParserRuleCall_4()); }
		ruleXGboost
		{ after(grammarAccess.getMLAlgorithmAccess().getXGboostParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DT__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDTAccess().getDTKeyword_1_0()); }
		'DT'
		{ after(grammarAccess.getDTAccess().getDTKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getDTAccess().getDecisionTreeKeyword_1_1()); }
		'DecisionTree'
		{ after(grammarAccess.getDTAccess().getDecisionTreeKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RandomForest__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRandomForestAccess().getRandomForestKeyword_1_0()); }
		'RandomForest'
		{ after(grammarAccess.getRandomForestAccess().getRandomForestKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRandomForestAccess().getRFKeyword_1_1()); }
		'RF'
		{ after(grammarAccess.getRandomForestAccess().getRFKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XFormula__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXFormulaAccess().getAllVariablesParserRuleCall_0()); }
		ruleAllVariables
		{ after(grammarAccess.getXFormulaAccess().getAllVariablesParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getXFormulaAccess().getPredictorVariablesParserRuleCall_1()); }
		rulePredictorVariables
		{ after(grammarAccess.getXFormulaAccess().getPredictorVariablesParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaItem__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaItemAccess().getColumnAssignment_0()); }
		(rule__FormulaItem__ColumnAssignment_0)
		{ after(grammarAccess.getFormulaItemAccess().getColumnAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getFormulaItemAccess().getColNameAssignment_1()); }
		(rule__FormulaItem__ColNameAssignment_1)
		{ after(grammarAccess.getFormulaItemAccess().getColNameAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StratificationMethod__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStratificationMethodAccess().getCrossValidationParserRuleCall_0()); }
		ruleCrossValidation
		{ after(grammarAccess.getStratificationMethodAccess().getCrossValidationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStratificationMethodAccess().getTrainingTestParserRuleCall_1()); }
		ruleTrainingTest
		{ after(grammarAccess.getStratificationMethodAccess().getTrainingTestParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVSeparator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSVSeparatorAccess().getCOMMAEnumLiteralDeclaration_0()); }
		(',')
		{ after(grammarAccess.getCSVSeparatorAccess().getCOMMAEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getCSVSeparatorAccess().getSEMI_COLONEnumLiteralDeclaration_1()); }
		(';')
		{ after(grammarAccess.getCSVSeparatorAccess().getSEMI_COLONEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FrameworkLang__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFrameworkLangAccess().getSCIKITEnumLiteralDeclaration_0()); }
		('scikit-learn')
		{ after(grammarAccess.getFrameworkLangAccess().getSCIKITEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFrameworkLangAccess().getREnumLiteralDeclaration_1()); }
		('R')
		{ after(grammarAccess.getFrameworkLangAccess().getREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFrameworkLangAccess().getJavaWekaEnumLiteralDeclaration_2()); }
		('Weka')
		{ after(grammarAccess.getFrameworkLangAccess().getJavaWekaEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVMKernel__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0()); }
		('linear')
		{ after(grammarAccess.getSVMKernelAccess().getLinearEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1()); }
		('polynomial')
		{ after(grammarAccess.getSVMKernelAccess().getPolyEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2()); }
		('radial')
		{ after(grammarAccess.getSVMKernelAccess().getRadialEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVMClassification__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMClassificationAccess().getCClassEnumLiteralDeclaration_0()); }
		('C-classification')
		{ after(grammarAccess.getSVMClassificationAccess().getCClassEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSVMClassificationAccess().getNuClassEnumLiteralDeclaration_1()); }
		('nu-classification')
		{ after(grammarAccess.getSVMClassificationAccess().getNuClassEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSVMClassificationAccess().getOneClassEnumLiteralDeclaration_2()); }
		('one-classification')
		{ after(grammarAccess.getSVMClassificationAccess().getOneClassEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValidationMetric__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValidationMetricAccess().getBALANCED_ACCURACYEnumLiteralDeclaration_0()); }
		('balanced_accuracy')
		{ after(grammarAccess.getValidationMetricAccess().getBALANCED_ACCURACYEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getRECALLEnumLiteralDeclaration_1()); }
		('recall')
		{ after(grammarAccess.getValidationMetricAccess().getRECALLEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getPRECISIONEnumLiteralDeclaration_2()); }
		('precision')
		{ after(grammarAccess.getValidationMetricAccess().getPRECISIONEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getF1EnumLiteralDeclaration_3()); }
		('F1')
		{ after(grammarAccess.getValidationMetricAccess().getF1EnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getACCURACYEnumLiteralDeclaration_4()); }
		('accuracy')
		{ after(grammarAccess.getValidationMetricAccess().getACCURACYEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getMACRO_RECALLEnumLiteralDeclaration_5()); }
		('macro_recall')
		{ after(grammarAccess.getValidationMetricAccess().getMACRO_RECALLEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getMACRO_PRECISIONEnumLiteralDeclaration_6()); }
		('macro_precision')
		{ after(grammarAccess.getValidationMetricAccess().getMACRO_PRECISIONEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getMACRO_F1EnumLiteralDeclaration_7()); }
		('macro_F1')
		{ after(grammarAccess.getValidationMetricAccess().getMACRO_F1EnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getValidationMetricAccess().getMACRO_ACCURACYEnumLiteralDeclaration_8()); }
		('macro_accuracy')
		{ after(grammarAccess.getValidationMetricAccess().getMACRO_ACCURACYEnumLiteralDeclaration_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MMLModel__Group__0__Impl
	rule__MMLModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMMLModelAccess().getInputAssignment_0()); }
	(rule__MMLModel__InputAssignment_0)
	{ after(grammarAccess.getMMLModelAccess().getInputAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MMLModel__Group__1__Impl
	rule__MMLModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMMLModelAccess().getAlgorithmsAssignment_1()); }
		(rule__MMLModel__AlgorithmsAssignment_1)
		{ after(grammarAccess.getMMLModelAccess().getAlgorithmsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getMMLModelAccess().getAlgorithmsAssignment_1()); }
		(rule__MMLModel__AlgorithmsAssignment_1)*
		{ after(grammarAccess.getMMLModelAccess().getAlgorithmsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MMLModel__Group__2__Impl
	rule__MMLModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMMLModelAccess().getFormulaAssignment_2()); }
	(rule__MMLModel__FormulaAssignment_2)?
	{ after(grammarAccess.getMMLModelAccess().getFormulaAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MMLModel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMMLModelAccess().getValidationAssignment_3()); }
	(rule__MMLModel__ValidationAssignment_3)
	{ after(grammarAccess.getMMLModelAccess().getValidationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataInput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataInput__Group__0__Impl
	rule__DataInput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataInput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataInputAccess().getDatainputKeyword_0()); }
	'datainput'
	{ after(grammarAccess.getDataInputAccess().getDatainputKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataInput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataInput__Group__1__Impl
	rule__DataInput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataInput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataInputAccess().getFilelocationAssignment_1()); }
	(rule__DataInput__FilelocationAssignment_1)
	{ after(grammarAccess.getDataInputAccess().getFilelocationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataInput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataInput__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataInput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataInputAccess().getParsingInstructionAssignment_2()); }
	(rule__DataInput__ParsingInstructionAssignment_2)?
	{ after(grammarAccess.getDataInputAccess().getParsingInstructionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CSVParsingConfiguration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSVParsingConfiguration__Group__0__Impl
	rule__CSVParsingConfiguration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVParsingConfiguration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSVParsingConfigurationAccess().getSeparatorKeyword_0()); }
	'separator'
	{ after(grammarAccess.getCSVParsingConfigurationAccess().getSeparatorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVParsingConfiguration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CSVParsingConfiguration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVParsingConfiguration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCSVParsingConfigurationAccess().getSepAssignment_1()); }
	(rule__CSVParsingConfiguration__SepAssignment_1)
	{ after(grammarAccess.getCSVParsingConfigurationAccess().getSepAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MLChoiceAlgorithm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLChoiceAlgorithm__Group__0__Impl
	rule__MLChoiceAlgorithm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLChoiceAlgorithmAccess().getMlframeworkKeyword_0()); }
	'mlframework'
	{ after(grammarAccess.getMLChoiceAlgorithmAccess().getMlframeworkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLChoiceAlgorithm__Group__1__Impl
	rule__MLChoiceAlgorithm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLChoiceAlgorithmAccess().getFrameworkAssignment_1()); }
	(rule__MLChoiceAlgorithm__FrameworkAssignment_1)
	{ after(grammarAccess.getMLChoiceAlgorithmAccess().getFrameworkAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLChoiceAlgorithm__Group__2__Impl
	rule__MLChoiceAlgorithm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmKeyword_2()); }
	'algorithm'
	{ after(grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MLChoiceAlgorithm__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmAssignment_3()); }
	(rule__MLChoiceAlgorithm__AlgorithmAssignment_3)
	{ after(grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__0__Impl
	rule__SVM__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getSVMAction_0()); }
	()
	{ after(grammarAccess.getSVMAccess().getSVMAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__1__Impl
	rule__SVM__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getSVMKeyword_1()); }
	'SVM'
	{ after(grammarAccess.getSVMAccess().getSVMKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__2__Impl
	rule__SVM__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getGroup_2()); }
	(rule__SVM__Group_2__0)?
	{ after(grammarAccess.getSVMAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__3__Impl
	rule__SVM__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getGroup_3()); }
	(rule__SVM__Group_3__0)?
	{ after(grammarAccess.getSVMAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__4__Impl
	rule__SVM__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getGroup_4()); }
	(rule__SVM__Group_4__0)?
	{ after(grammarAccess.getSVMAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getGroup_5()); }
	(rule__SVM__Group_5__0)?
	{ after(grammarAccess.getSVMAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_2__0__Impl
	rule__SVM__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getGammaKeyword_2_0()); }
	'gamma='
	{ after(grammarAccess.getSVMAccess().getGammaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getGammaAssignment_2_1()); }
	(rule__SVM__GammaAssignment_2_1)
	{ after(grammarAccess.getSVMAccess().getGammaAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_3__0__Impl
	rule__SVM__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getCKeyword_3_0()); }
	'C='
	{ after(grammarAccess.getSVMAccess().getCKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getCAssignment_3_1()); }
	(rule__SVM__CAssignment_3_1)
	{ after(grammarAccess.getSVMAccess().getCAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_4__0__Impl
	rule__SVM__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getKernelSpecifiedAssignment_4_0()); }
	(rule__SVM__KernelSpecifiedAssignment_4_0)
	{ after(grammarAccess.getSVMAccess().getKernelSpecifiedAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getKernelAssignment_4_1()); }
	(rule__SVM__KernelAssignment_4_1)
	{ after(grammarAccess.getSVMAccess().getKernelAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SVM__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_5__0__Impl
	rule__SVM__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getClassificationSpecifiedAssignment_5_0()); }
	(rule__SVM__ClassificationSpecifiedAssignment_5_0)
	{ after(grammarAccess.getSVMAccess().getClassificationSpecifiedAssignment_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SVM__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSVMAccess().getSvmclassificationAssignment_5_1()); }
	(rule__SVM__SvmclassificationAssignment_5_1)
	{ after(grammarAccess.getSVMAccess().getSvmclassificationAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DT__Group__0__Impl
	rule__DT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDTAccess().getDTAction_0()); }
	()
	{ after(grammarAccess.getDTAccess().getDTAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DT__Group__1__Impl
	rule__DT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDTAccess().getAlternatives_1()); }
	(rule__DT__Alternatives_1)
	{ after(grammarAccess.getDTAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DT__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDTAccess().getMax_depthAssignment_2()); }
	(rule__DT__Max_depthAssignment_2)?
	{ after(grammarAccess.getDTAccess().getMax_depthAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RandomForest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RandomForest__Group__0__Impl
	rule__RandomForest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RandomForest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRandomForestAccess().getRandomForestAction_0()); }
	()
	{ after(grammarAccess.getRandomForestAccess().getRandomForestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RandomForest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RandomForest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RandomForest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRandomForestAccess().getAlternatives_1()); }
	(rule__RandomForest__Alternatives_1)
	{ after(grammarAccess.getRandomForestAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogisticRegression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogisticRegression__Group__0__Impl
	rule__LogisticRegression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogisticRegression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogisticRegressionAccess().getLogisticRegressionAction_0()); }
	()
	{ after(grammarAccess.getLogisticRegressionAccess().getLogisticRegressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogisticRegression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogisticRegression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogisticRegression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogisticRegressionAccess().getLogisticRegressionKeyword_1()); }
	'LogisticRegression'
	{ after(grammarAccess.getLogisticRegressionAccess().getLogisticRegressionKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XGboost__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XGboost__Group__0__Impl
	rule__XGboost__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XGboost__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXGboostAccess().getXGboostAction_0()); }
	()
	{ after(grammarAccess.getXGboostAccess().getXGboostAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XGboost__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XGboost__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XGboost__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXGboostAccess().getXGboostKeyword_1()); }
	'XGboost'
	{ after(grammarAccess.getXGboostAccess().getXGboostKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FLOAT__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__0__Impl
	rule__FLOAT__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__1__Impl
	rule__FLOAT__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFLOATAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FLOAT__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FLOAT__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getFLOATAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RFormula__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RFormula__Group__0__Impl
	rule__RFormula__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRFormulaAccess().getFormulaKeyword_0()); }
	'formula'
	{ after(grammarAccess.getRFormulaAccess().getFormulaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RFormula__Group__1__Impl
	rule__RFormula__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRFormulaAccess().getGroup_1()); }
	(rule__RFormula__Group_1__0)?
	{ after(grammarAccess.getRFormulaAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RFormula__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRFormulaAccess().getPredictorsAssignment_2()); }
	(rule__RFormula__PredictorsAssignment_2)
	{ after(grammarAccess.getRFormulaAccess().getPredictorsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RFormula__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RFormula__Group_1__0__Impl
	rule__RFormula__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRFormulaAccess().getPredictiveAssignment_1_0()); }
	(rule__RFormula__PredictiveAssignment_1_0)
	{ after(grammarAccess.getRFormulaAccess().getPredictiveAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RFormula__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRFormulaAccess().getTildeKeyword_1_1()); }
	'~'
	{ after(grammarAccess.getRFormulaAccess().getTildeKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredictorVariables__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictorVariables__Group__0__Impl
	rule__PredictorVariables__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictorVariablesAccess().getVarsAssignment_0()); }
	(rule__PredictorVariables__VarsAssignment_0)
	{ after(grammarAccess.getPredictorVariablesAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictorVariables__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictorVariablesAccess().getGroup_1()); }
	(rule__PredictorVariables__Group_1__0)*
	{ after(grammarAccess.getPredictorVariablesAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PredictorVariables__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictorVariables__Group_1__0__Impl
	rule__PredictorVariables__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictorVariablesAccess().getPlusSignKeyword_1_0()); }
	'+'
	{ after(grammarAccess.getPredictorVariablesAccess().getPlusSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PredictorVariables__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPredictorVariablesAccess().getVarsAssignment_1_1()); }
	(rule__PredictorVariables__VarsAssignment_1_1)
	{ after(grammarAccess.getPredictorVariablesAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Validation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Validation__Group__0__Impl
	rule__Validation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValidationAccess().getStratificationAssignment_0()); }
	(rule__Validation__StratificationAssignment_0)
	{ after(grammarAccess.getValidationAccess().getStratificationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Validation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getValidationAccess().getMetricAssignment_1()); }
		(rule__Validation__MetricAssignment_1)
		{ after(grammarAccess.getValidationAccess().getMetricAssignment_1()); }
	)
	(
		{ before(grammarAccess.getValidationAccess().getMetricAssignment_1()); }
		(rule__Validation__MetricAssignment_1)*
		{ after(grammarAccess.getValidationAccess().getMetricAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CrossValidation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__0__Impl
	rule__CrossValidation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getCrossValidationKeyword_0()); }
	'CrossValidation'
	{ after(grammarAccess.getCrossValidationAccess().getCrossValidationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__1__Impl
	rule__CrossValidation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getCrossValidationAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__2__Impl
	rule__CrossValidation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getNumRepetitionCrossKeyword_2()); }
	'numRepetitionCross'
	{ after(grammarAccess.getCrossValidationAccess().getNumRepetitionCrossKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__3__Impl
	rule__CrossValidation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getNumberAssignment_3()); }
	(rule__CrossValidation__NumberAssignment_3)
	{ after(grammarAccess.getCrossValidationAccess().getNumberAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CrossValidation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCrossValidationAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getCrossValidationAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrainingTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__0__Impl
	rule__TrainingTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0()); }
	'TrainingTest'
	{ after(grammarAccess.getTrainingTestAccess().getTrainingTestKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__1__Impl
	rule__TrainingTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getTrainingTestAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__2__Impl
	rule__TrainingTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getPercentageTrainingKeyword_2()); }
	'percentageTraining'
	{ after(grammarAccess.getTrainingTestAccess().getPercentageTrainingKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__3__Impl
	rule__TrainingTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getNumberAssignment_3()); }
	(rule__TrainingTest__NumberAssignment_3)
	{ after(grammarAccess.getTrainingTestAccess().getNumberAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrainingTest__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrainingTestAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTrainingTestAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MMLModel__InputAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMMLModelAccess().getInputDataInputParserRuleCall_0_0()); }
		ruleDataInput
		{ after(grammarAccess.getMMLModelAccess().getInputDataInputParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__AlgorithmsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMMLModelAccess().getAlgorithmsMLChoiceAlgorithmParserRuleCall_1_0()); }
		ruleMLChoiceAlgorithm
		{ after(grammarAccess.getMMLModelAccess().getAlgorithmsMLChoiceAlgorithmParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__FormulaAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMMLModelAccess().getFormulaRFormulaParserRuleCall_2_0()); }
		ruleRFormula
		{ after(grammarAccess.getMMLModelAccess().getFormulaRFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MMLModel__ValidationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMMLModelAccess().getValidationValidationParserRuleCall_3_0()); }
		ruleValidation
		{ after(grammarAccess.getMMLModelAccess().getValidationValidationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataInput__FilelocationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataInputAccess().getFilelocationSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getDataInputAccess().getFilelocationSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataInput__ParsingInstructionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataInputAccess().getParsingInstructionCSVParsingConfigurationParserRuleCall_2_0()); }
		ruleCSVParsingConfiguration
		{ after(grammarAccess.getDataInputAccess().getParsingInstructionCSVParsingConfigurationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CSVParsingConfiguration__SepAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCSVParsingConfigurationAccess().getSepCSVSeparatorEnumRuleCall_1_0()); }
		ruleCSVSeparator
		{ after(grammarAccess.getCSVParsingConfigurationAccess().getSepCSVSeparatorEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__FrameworkAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLChoiceAlgorithmAccess().getFrameworkFrameworkLangEnumRuleCall_1_0()); }
		ruleFrameworkLang
		{ after(grammarAccess.getMLChoiceAlgorithmAccess().getFrameworkFrameworkLangEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MLChoiceAlgorithm__AlgorithmAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmMLAlgorithmParserRuleCall_3_0()); }
		ruleMLAlgorithm
		{ after(grammarAccess.getMLChoiceAlgorithmAccess().getAlgorithmMLAlgorithmParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__GammaAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getGammaFLOATParserRuleCall_2_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getSVMAccess().getGammaFLOATParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__CAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getCFLOATParserRuleCall_3_1_0()); }
		ruleFLOAT
		{ after(grammarAccess.getSVMAccess().getCFLOATParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__KernelSpecifiedAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getKernelSpecifiedKernelKeyword_4_0_0()); }
		(
			{ before(grammarAccess.getSVMAccess().getKernelSpecifiedKernelKeyword_4_0_0()); }
			'kernel='
			{ after(grammarAccess.getSVMAccess().getKernelSpecifiedKernelKeyword_4_0_0()); }
		)
		{ after(grammarAccess.getSVMAccess().getKernelSpecifiedKernelKeyword_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__KernelAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getKernelSVMKernelEnumRuleCall_4_1_0()); }
		ruleSVMKernel
		{ after(grammarAccess.getSVMAccess().getKernelSVMKernelEnumRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__ClassificationSpecifiedAssignment_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getClassificationSpecifiedClassificationKeyword_5_0_0()); }
		(
			{ before(grammarAccess.getSVMAccess().getClassificationSpecifiedClassificationKeyword_5_0_0()); }
			'classification'
			{ after(grammarAccess.getSVMAccess().getClassificationSpecifiedClassificationKeyword_5_0_0()); }
		)
		{ after(grammarAccess.getSVMAccess().getClassificationSpecifiedClassificationKeyword_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SVM__SvmclassificationAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSVMAccess().getSvmclassificationSVMClassificationEnumRuleCall_5_1_0()); }
		ruleSVMClassification
		{ after(grammarAccess.getSVMAccess().getSvmclassificationSVMClassificationEnumRuleCall_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DT__Max_depthAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDTAccess().getMax_depthINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getDTAccess().getMax_depthINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__PredictiveAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRFormulaAccess().getPredictiveFormulaItemParserRuleCall_1_0_0()); }
		ruleFormulaItem
		{ after(grammarAccess.getRFormulaAccess().getPredictiveFormulaItemParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RFormula__PredictorsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRFormulaAccess().getPredictorsXFormulaParserRuleCall_2_0()); }
		ruleXFormula
		{ after(grammarAccess.getRFormulaAccess().getPredictorsXFormulaParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AllVariables__AllAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAllVariablesAccess().getAllFullStopKeyword_0()); }
		(
			{ before(grammarAccess.getAllVariablesAccess().getAllFullStopKeyword_0()); }
			'.'
			{ after(grammarAccess.getAllVariablesAccess().getAllFullStopKeyword_0()); }
		)
		{ after(grammarAccess.getAllVariablesAccess().getAllFullStopKeyword_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredictorVariablesAccess().getVarsFormulaItemParserRuleCall_0_0()); }
		ruleFormulaItem
		{ after(grammarAccess.getPredictorVariablesAccess().getVarsFormulaItemParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredictorVariables__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredictorVariablesAccess().getVarsFormulaItemParserRuleCall_1_1_0()); }
		ruleFormulaItem
		{ after(grammarAccess.getPredictorVariablesAccess().getVarsFormulaItemParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaItem__ColumnAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaItemAccess().getColumnINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getFormulaItemAccess().getColumnINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FormulaItem__ColNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFormulaItemAccess().getColNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getFormulaItemAccess().getColNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__StratificationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValidationAccess().getStratificationStratificationMethodParserRuleCall_0_0()); }
		ruleStratificationMethod
		{ after(grammarAccess.getValidationAccess().getStratificationStratificationMethodParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__MetricAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValidationAccess().getMetricValidationMetricEnumRuleCall_1_0()); }
		ruleValidationMetric
		{ after(grammarAccess.getValidationAccess().getMetricValidationMetricEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CrossValidation__NumberAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCrossValidationAccess().getNumberINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getCrossValidationAccess().getNumberINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainingTest__NumberAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrainingTestAccess().getNumberINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getTrainingTestAccess().getNumberINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
